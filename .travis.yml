---
sudo: false
language: cpp
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
    - g++-4.8-multilib
    - gcc-multilib

# Build matrix
os:
- linux
- osx
env:
  global:
  - secure: "qEdwCY/ilHkqWkqasN5MgWCnzzop4lEYkbpxEiVMTZBY12p4uV6ysPQ+ZLZcx10Cg90RIQlsPeEANIhCzkWfnQi+ySmeiKY9JR2eSnb69wM7dBQ/uxv04eVChAlZSsDHwmTIIzIzZFsrWrcwwJaENGCJYKqZ9LKOiGFGQ8Is09A="
  matrix:
  - TRAVIS_NODE_VERSION="0.10"
  - TRAVIS_NODE_VERSION="0.10" ARCH="x86"
  - TRAVIS_NODE_VERSION="0.12"
  - TRAVIS_NODE_VERSION="0.12" ARCH="x86"
  - TRAVIS_NODE_VERSION="4"
  - TRAVIS_NODE_VERSION="4" ARCH="x86"
  - TRAVIS_NODE_VERSION="5"
  - TRAVIS_NODE_VERSION="5" ARCH="x86"
  - TRAVIS_NODE_VERSION="6"
  - TRAVIS_NODE_VERSION="6" ARCH="x86"
matrix:
  exclude:
  - os: osx
    env: TRAVIS_NODE_VERSION="0.10" ARCH="x86"
  - os: osx
    env: TRAVIS_NODE_VERSION="0.12" ARCH="x86"
  - os: osx
    env: TRAVIS_NODE_VERSION="4" ARCH="x86"
  - os: osx
    env: TRAVIS_NODE_VERSION="5" ARCH="x86"
  - os: osx
    env: TRAVIS_NODE_VERSION="6" ARCH="x86"

before_install:
# reinstall latest nvm
- rm -rf ~/.nvm && git clone https://github.com/creationix/nvm.git ~/.nvm && (cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`) && source ~/.nvm/nvm.sh
- nvm install $TRAVIS_NODE_VERSION
- PATH=$PATH:`pwd`/node_modules/.bin

- BASE_URL=$(node -p "'https://nodejs.org/dist/' + process.version")
- X86_FILE=$(node -p "'node-' + process.version + '-' + process.platform + '-x86'")
# download node if testing x86 architecture
- if [[ "$ARCH" == "x86" ]]; then wget $BASE_URL/$X86_FILE.tar.gz; tar -xf $X86_FILE.tar.gz; export PATH=$X86_FILE/bin:$PATH; fi

# print versions
- uname -a
- file `which node`
- node --version
- node -p 'process.platform + "@" + process.arch'
- npm --version

# use g++-4.8 on Linux
- if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX=g++-4.8; fi
- $CXX --version

# figure out if we should publish
- PUBLISH_BINARY=false
# if we are building a tag then publish
- echo $TRAVIS_BRANCH
- echo `git describe --tags --always HEAD`
- if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;
- echo "Publishing native platform Binary Package? ->" $PUBLISH_BINARY

install:
# ensure source install works
- npm install --build-from-source

script:
# test our module
- npm run lint
- node ./
- npm test

# if publishing, do it
- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package; fi;
- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp-github publish --release; fi;

# cleanup
- node-pre-gyp clean

# test binary exists
- if [[ $PUBLISH_BINARY == true ]]; then npm install --fallback-to-build=false; fi;

after_success:
- npm run report-coverage
